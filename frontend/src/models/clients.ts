//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class UpdateWorkoutPlanDto implements IUpdateWorkoutPlanDto {
    id!: string;
    type?: UpdateWorkoutPlanDtoType;
    day?: UpdateWorkoutPlanDtoDay;
    description?: string;
    exerciseIds?: string[];

    [key: string]: any;

    constructor(data?: IUpdateWorkoutPlanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.type = _data["type"];
            this.day = _data["day"];
            this.description = _data["description"];
            if (Array.isArray(_data["exerciseIds"])) {
                this.exerciseIds = [] as any;
                for (let item of _data["exerciseIds"])
                    this.exerciseIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateWorkoutPlanDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateWorkoutPlanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["type"] = this.type;
        data["day"] = this.day;
        data["description"] = this.description;
        if (Array.isArray(this.exerciseIds)) {
            data["exerciseIds"] = [];
            for (let item of this.exerciseIds)
                data["exerciseIds"].push(item);
        }
        return data;
    }
}

export interface IUpdateWorkoutPlanDto {
    id: string;
    type?: UpdateWorkoutPlanDtoType;
    day?: UpdateWorkoutPlanDtoDay;
    description?: string;
    exerciseIds?: string[];

    [key: string]: any;
}

export class UpdateMealDto implements IUpdateMealDto {
    id!: string;
    type?: UpdateMealDtoType;
    dishIds?: string[];

    [key: string]: any;

    constructor(data?: IUpdateMealDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.type = _data["type"];
            if (Array.isArray(_data["dishIds"])) {
                this.dishIds = [] as any;
                for (let item of _data["dishIds"])
                    this.dishIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateMealDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMealDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["type"] = this.type;
        if (Array.isArray(this.dishIds)) {
            data["dishIds"] = [];
            for (let item of this.dishIds)
                data["dishIds"].push(item);
        }
        return data;
    }
}

export interface IUpdateMealDto {
    id: string;
    type?: UpdateMealDtoType;
    dishIds?: string[];

    [key: string]: any;
}

export class UpdateExerciseDto implements IUpdateExerciseDto {
    id!: string;
    name?: string;
    description?: string;
    categoryId?: string;

    [key: string]: any;

    constructor(data?: IUpdateExerciseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): UpdateExerciseDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateExerciseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface IUpdateExerciseDto {
    id: string;
    name?: string;
    description?: string;
    categoryId?: string;

    [key: string]: any;
}

export class UpdateExerciseTrackPointDto implements IUpdateExerciseTrackPointDto {
    id!: string;
    date?: Date;
    repsCount?: number;
    setsCount?: number;
    description?: string;
    weight?: number;
    exerciseId?: string;

    [key: string]: any;

    constructor(data?: IUpdateExerciseTrackPointDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.repsCount = _data["repsCount"];
            this.setsCount = _data["setsCount"];
            this.description = _data["description"];
            this.exerciseId = _data["exerciseId"];
        }
    }

    static fromJS(data: any): UpdateExerciseTrackPointDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateExerciseTrackPointDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["repsCount"] = this.repsCount;
        data["setsCount"] = this.setsCount;
        data["description"] = this.description;
        data["exerciseId"] = this.exerciseId;
        return data;
    }
}

export interface IUpdateExerciseTrackPointDto {
    id: string;
    date?: Date;
    repsCount?: number;
    setsCount?: number;
    description?: string;
    weight?: number;
    exerciseId?: string;

    [key: string]: any;
}

export class UpdateExerciseCategoryDto implements IUpdateExerciseCategoryDto {
    id!: string;
    name?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: IUpdateExerciseCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateExerciseCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateExerciseCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateExerciseCategoryDto {
    id: string;
    name?: string;
    description?: string;

    [key: string]: any;
}

export class UpdateDishDto implements IUpdateDishDto {
    id!: string;
    name?: string;
    description?: string;
    calories?: number;
    carbs?: number;
    fat?: number;
    protein?: number;

    [key: string]: any;

    constructor(data?: IUpdateDishDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.calories = _data["calories"];
            this.carbs = _data["carbs"];
            this.fat = _data["fat"];
            this.protein = _data["protein"];
        }
    }

    static fromJS(data: any): UpdateDishDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDishDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["calories"] = this.calories;
        data["carbs"] = this.carbs;
        data["fat"] = this.fat;
        data["protein"] = this.protein;
        return data;
    }
}

export interface IUpdateDishDto {
    id: string;
    name?: string;
    description?: string;
    calories?: number;
    carbs?: number;
    fat?: number;
    protein?: number;

    [key: string]: any;
}

export class UpdateDietDto implements IUpdateDietDto {
    id!: string;
    name?: string;
    description?: string;
    mealIds?: string[];

    [key: string]: any;

    constructor(data?: IUpdateDietDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["mealIds"])) {
                this.mealIds = [] as any;
                for (let item of _data["mealIds"])
                    this.mealIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateDietDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDietDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.mealIds)) {
            data["mealIds"] = [];
            for (let item of this.mealIds)
                data["mealIds"].push(item);
        }
        return data;
    }
}

export interface IUpdateDietDto {
    id: string;
    name?: string;
    description?: string;
    mealIds?: string[];

    [key: string]: any;
}

export class UpdateDailyWeightDto implements IUpdateDailyWeightDto {
    id!: string;
    date?: Date;
    weight?: number;

    [key: string]: any;

    constructor(data?: IUpdateDailyWeightDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): UpdateDailyWeightDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDailyWeightDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["weight"] = this.weight;
        return data;
    }
}

export interface IUpdateDailyWeightDto {
    id: string;
    date?: Date;
    weight?: number;

    [key: string]: any;
}

export class CreateWorkoutPlanDto implements ICreateWorkoutPlanDto {
    type!: CreateWorkoutPlanDtoType;
    day!: CreateWorkoutPlanDtoDay;
    description?: string;
    exerciseIds?: string[];

    [key: string]: any;

    constructor(data?: ICreateWorkoutPlanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.day = _data["day"];
            this.description = _data["description"];
            if (Array.isArray(_data["exerciseIds"])) {
                this.exerciseIds = [] as any;
                for (let item of _data["exerciseIds"])
                    this.exerciseIds!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateWorkoutPlanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWorkoutPlanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["day"] = this.day;
        data["description"] = this.description;
        if (Array.isArray(this.exerciseIds)) {
            data["exerciseIds"] = [];
            for (let item of this.exerciseIds)
                data["exerciseIds"].push(item);
        }
        return data;
    }
}

export interface ICreateWorkoutPlanDto {
    type: CreateWorkoutPlanDtoType;
    day: CreateWorkoutPlanDtoDay;
    description?: string;
    exerciseIds?: string[];

    [key: string]: any;
}

export class CreateMealDto implements ICreateMealDto {
    type!: CreateMealDtoType;
    dishIds?: string[];

    [key: string]: any;

    constructor(data?: ICreateMealDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            if (Array.isArray(_data["dishIds"])) {
                this.dishIds = [] as any;
                for (let item of _data["dishIds"])
                    this.dishIds!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateMealDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMealDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        if (Array.isArray(this.dishIds)) {
            data["dishIds"] = [];
            for (let item of this.dishIds)
                data["dishIds"].push(item);
        }
        return data;
    }
}

export interface ICreateMealDto {
    type: CreateMealDtoType;
    dishIds?: string[];

    [key: string]: any;
}

export class CreateExerciseDto implements ICreateExerciseDto {
    name!: string;
    description?: string;
    categoryId!: string;

    [key: string]: any;

    constructor(data?: ICreateExerciseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): CreateExerciseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExerciseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface ICreateExerciseDto {
    name: string;
    description?: string;
    categoryId: string;

    [key: string]: any;
}

export class CreateExerciseTrackPointDto implements ICreateExerciseTrackPointDto {
    date!: Date;
    repsCount!: number;
    setsCount!: number;
    description?: string;
    exerciseId!: string;

    [key: string]: any;

    constructor(data?: ICreateExerciseTrackPointDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.repsCount = _data["repsCount"];
            this.setsCount = _data["setsCount"];
            this.description = _data["description"];
            this.exerciseId = _data["exerciseId"];
        }
    }

    static fromJS(data: any): CreateExerciseTrackPointDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExerciseTrackPointDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["repsCount"] = this.repsCount;
        data["setsCount"] = this.setsCount;
        data["description"] = this.description;
        data["exerciseId"] = this.exerciseId;
        return data;
    }
}

export interface ICreateExerciseTrackPointDto {
    date: Date;
    repsCount: number;
    setsCount: number;
    description?: string;
    exerciseId: string;

    [key: string]: any;
}

export class GetExerciseTrackPointDto implements IGetExerciseTrackPointDto {
    id?: string;
    date?: Date;
    repsCount?: number;
    setsCount?: number;
    description?: string;
    exerciseId?: string;

    [key: string]: any;

    constructor(data?: IGetExerciseTrackPointDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.repsCount = _data["repsCount"];
            this.setsCount = _data["setsCount"];
            this.description = _data["description"];
            this.exerciseId = _data["exerciseId"];
        }
    }

    static fromJS(data: any): GetExerciseTrackPointDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetExerciseTrackPointDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["repsCount"] = this.repsCount;
        data["setsCount"] = this.setsCount;
        data["description"] = this.description;
        data["exerciseId"] = this.exerciseId;
        return data;
    }
}

export interface IGetExerciseTrackPointDto {
    id?: string;
    date?: Date;
    repsCount?: number;
    setsCount?: number;
    description?: string;
    exerciseId?: string;

    [key: string]: any;
}

export class CreateExerciseCategoryDto implements ICreateExerciseCategoryDto {
    name!: string;
    description?: string;

    [key: string]: any;

    constructor(data?: ICreateExerciseCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateExerciseCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExerciseCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateExerciseCategoryDto {
    name: string;
    description?: string;

    [key: string]: any;
}

export class CreateDishDto implements ICreateDishDto {
    name!: string;
    description?: string;
    calories!: number;
    carbs!: number;
    fat!: number;
    protein!: number;

    [key: string]: any;

    constructor(data?: ICreateDishDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
            this.calories = _data["calories"];
            this.carbs = _data["carbs"];
            this.fat = _data["fat"];
            this.protein = _data["protein"];
        }
    }

    static fromJS(data: any): CreateDishDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDishDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        data["calories"] = this.calories;
        data["carbs"] = this.carbs;
        data["fat"] = this.fat;
        data["protein"] = this.protein;
        return data;
    }
}

export interface ICreateDishDto {
    name: string;
    description?: string;
    calories: number;
    carbs: number;
    fat: number;
    protein: number;

    [key: string]: any;
}

export class CreateDietDto implements ICreateDietDto {
    name!: string;
    description?: string;
    mealIds?: string[];

    [key: string]: any;

    constructor(data?: ICreateDietDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["mealIds"])) {
                this.mealIds = [] as any;
                for (let item of _data["mealIds"])
                    this.mealIds!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateDietDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDietDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.mealIds)) {
            data["mealIds"] = [];
            for (let item of this.mealIds)
                data["mealIds"].push(item);
        }
        return data;
    }
}

export interface ICreateDietDto {
    name: string;
    description?: string;
    mealIds?: string[];

    [key: string]: any;
}

export class CreateDailyWeightDto implements ICreateDailyWeightDto {
    date!: Date;
    weight!: number;

    [key: string]: any;

    constructor(data?: ICreateDailyWeightDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): CreateDailyWeightDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDailyWeightDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["weight"] = this.weight;
        return data;
    }
}

export interface ICreateDailyWeightDto {
    date: Date;
    weight: number;

    [key: string]: any;
}

export class SignupRequestDto implements ISignupRequestDto {
    username?: string;
    password?: string;
    email?: string;
    firstName?: string;
    lastName?: string;

    [key: string]: any;

    constructor(data?: ISignupRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): SignupRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new SignupRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface ISignupRequestDto {
    username?: string;
    password?: string;
    email?: string;
    firstName?: string;
    lastName?: string;

    [key: string]: any;
}

export class LoginRequestDto implements ILoginRequestDto {
    username?: string;
    password?: string;

    [key: string]: any;

    constructor(data?: ILoginRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequestDto {
    username?: string;
    password?: string;

    [key: string]: any;
}

export class GetExerciseCategoryDto implements IGetExerciseCategoryDto {
    id?: string;
    name?: string;
    description?: string;
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetExerciseCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetExerciseCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetExerciseCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetExerciseCategoryDto {
    id?: string;
    name?: string;
    description?: string;
    userId?: string;

    [key: string]: any;
}

export class GetExerciseDto implements IGetExerciseDto {
    id?: string;
    name?: string;
    description?: string;
    category?: GetExerciseCategoryDto;
    trackPoints?: GetExerciseTrackPointDto[];
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetExerciseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.category = _data["category"] ? GetExerciseCategoryDto.fromJS(_data["category"]) : <any>undefined;
            if (Array.isArray(_data["trackPoints"])) {
                this.trackPoints = [] as any;
                for (let item of _data["trackPoints"])
                    this.trackPoints!.push(GetExerciseTrackPointDto.fromJS(item));
            }
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetExerciseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetExerciseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        if (Array.isArray(this.trackPoints)) {
            data["trackPoints"] = [];
            for (let item of this.trackPoints)
                data["trackPoints"].push(item.toJSON());
        }
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetExerciseDto {
    id?: string;
    name?: string;
    description?: string;
    category?: GetExerciseCategoryDto;
    trackPoints?: GetExerciseTrackPointDto[];
    userId?: string;

    [key: string]: any;
}

export class GetWorkoutPlanDto implements IGetWorkoutPlanDto {
    id?: string;
    type?: GetWorkoutPlanDtoType;
    day?: GetWorkoutPlanDtoDay;
    description?: string;
    exercises?: GetExerciseDto[];
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetWorkoutPlanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.type = _data["type"];
            this.day = _data["day"];
            this.description = _data["description"];
            if (Array.isArray(_data["exercises"])) {
                this.exercises = [] as any;
                for (let item of _data["exercises"])
                    this.exercises!.push(GetExerciseDto.fromJS(item));
            }
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetWorkoutPlanDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetWorkoutPlanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["type"] = this.type;
        data["day"] = this.day;
        data["description"] = this.description;
        if (Array.isArray(this.exercises)) {
            data["exercises"] = [];
            for (let item of this.exercises)
                data["exercises"].push(item.toJSON());
        }
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetWorkoutPlanDto {
    id?: string;
    type?: GetWorkoutPlanDtoType;
    day?: GetWorkoutPlanDtoDay;
    description?: string;
    exercises?: GetExerciseDto[];
    userId?: string;

    [key: string]: any;
}

export class GetWeeklyWeightDto implements IGetWeeklyWeightDto {
    id?: string;
    weekNumber?: number;
    year?: number;
    startDate?: Date;
    endDate?: Date;
    averageWeight?: number;
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetWeeklyWeightDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.weekNumber = _data["weekNumber"];
            this.year = _data["year"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.averageWeight = _data["averageWeight"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetWeeklyWeightDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetWeeklyWeightDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["weekNumber"] = this.weekNumber;
        data["year"] = this.year;
        data["startDate"] = this.startDate ? formatDate(this.startDate) : <any>undefined;
        data["endDate"] = this.endDate ? formatDate(this.endDate) : <any>undefined;
        data["averageWeight"] = this.averageWeight;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetWeeklyWeightDto {
    id?: string;
    weekNumber?: number;
    year?: number;
    startDate?: Date;
    endDate?: Date;
    averageWeight?: number;
    userId?: string;

    [key: string]: any;
}

export class GetDishDto implements IGetDishDto {
    id?: string;
    name?: string;
    description?: string;
    calories?: number;
    carbs?: number;
    fat?: number;
    protein?: number;
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetDishDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.calories = _data["calories"];
            this.carbs = _data["carbs"];
            this.fat = _data["fat"];
            this.protein = _data["protein"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetDishDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetDishDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["calories"] = this.calories;
        data["carbs"] = this.carbs;
        data["fat"] = this.fat;
        data["protein"] = this.protein;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetDishDto {
    id?: string;
    name?: string;
    description?: string;
    calories?: number;
    carbs?: number;
    fat?: number;
    protein?: number;
    userId?: string;

    [key: string]: any;
}

export class GetMealDto implements IGetMealDto {
    id?: string;
    type?: GetMealDtoType;
    dishes?: GetDishDto[];
    totalCalories?: number;
    totalCarbs?: number;
    totalFat?: number;
    totalProtein?: number;
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetMealDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.type = _data["type"];
            if (Array.isArray(_data["dishes"])) {
                this.dishes = [] as any;
                for (let item of _data["dishes"])
                    this.dishes!.push(GetDishDto.fromJS(item));
            }
            this.totalCalories = _data["totalCalories"];
            this.totalCarbs = _data["totalCarbs"];
            this.totalFat = _data["totalFat"];
            this.totalProtein = _data["totalProtein"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetMealDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMealDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["type"] = this.type;
        if (Array.isArray(this.dishes)) {
            data["dishes"] = [];
            for (let item of this.dishes)
                data["dishes"].push(item.toJSON());
        }
        data["totalCalories"] = this.totalCalories;
        data["totalCarbs"] = this.totalCarbs;
        data["totalFat"] = this.totalFat;
        data["totalProtein"] = this.totalProtein;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetMealDto {
    id?: string;
    type?: GetMealDtoType;
    dishes?: GetDishDto[];
    totalCalories?: number;
    totalCarbs?: number;
    totalFat?: number;
    totalProtein?: number;
    userId?: string;

    [key: string]: any;
}

export class GetDietDto implements IGetDietDto {
    id?: string;
    name?: string;
    description?: string;
    meals?: GetMealDto[];
    totalCalories?: number;
    totalCarbs?: number;
    totalFat?: number;
    totalProtein?: number;
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetDietDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["meals"])) {
                this.meals = [] as any;
                for (let item of _data["meals"])
                    this.meals!.push(GetMealDto.fromJS(item));
            }
            this.totalCalories = _data["totalCalories"];
            this.totalCarbs = _data["totalCarbs"];
            this.totalFat = _data["totalFat"];
            this.totalProtein = _data["totalProtein"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetDietDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetDietDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.meals)) {
            data["meals"] = [];
            for (let item of this.meals)
                data["meals"].push(item.toJSON());
        }
        data["totalCalories"] = this.totalCalories;
        data["totalCarbs"] = this.totalCarbs;
        data["totalFat"] = this.totalFat;
        data["totalProtein"] = this.totalProtein;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetDietDto {
    id?: string;
    name?: string;
    description?: string;
    meals?: GetMealDto[];
    totalCalories?: number;
    totalCarbs?: number;
    totalFat?: number;
    totalProtein?: number;
    userId?: string;

    [key: string]: any;
}

export class GetDailyWeightDto implements IGetDailyWeightDto {
    id?: string;
    date?: Date;
    weight?: number;
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetDailyWeightDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.weight = _data["weight"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetDailyWeightDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetDailyWeightDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["weight"] = this.weight;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetDailyWeightDto {
    id?: string;
    date?: Date;
    weight?: number;
    userId?: string;

    [key: string]: any;
}

export enum Day {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY",
}

export enum UpdateWorkoutPlanDtoType {
    PUSH_AND_PULL_1 = "PUSH_AND_PULL_1",
    PUSH_AND_PULL_2 = "PUSH_AND_PULL_2",
    LEGS_1 = "LEGS_1",
    LEGS_2 = "LEGS_2",
    ABS = "ABS",
}

export enum UpdateWorkoutPlanDtoDay {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY",
}

export enum UpdateMealDtoType {
    BREAKFAST = "BREAKFAST",
    LUNCH = "LUNCH",
    DINNER = "DINNER",
    SNACKS = "SNACKS",
}

export enum CreateWorkoutPlanDtoType {
    PUSH_AND_PULL_1 = "PUSH_AND_PULL_1",
    PUSH_AND_PULL_2 = "PUSH_AND_PULL_2",
    LEGS_1 = "LEGS_1",
    LEGS_2 = "LEGS_2",
    ABS = "ABS",
}

export enum CreateWorkoutPlanDtoDay {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY",
}

export enum CreateMealDtoType {
    BREAKFAST = "BREAKFAST",
    LUNCH = "LUNCH",
    DINNER = "DINNER",
    SNACKS = "SNACKS",
}

export enum GetWorkoutPlanDtoType {
    PUSH_AND_PULL_1 = "PUSH_AND_PULL_1",
    PUSH_AND_PULL_2 = "PUSH_AND_PULL_2",
    LEGS_1 = "LEGS_1",
    LEGS_2 = "LEGS_2",
    ABS = "ABS",
}

export enum GetWorkoutPlanDtoDay {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY",
}

export enum GetMealDtoType {
    BREAKFAST = "BREAKFAST",
    LUNCH = "LUNCH",
    DINNER = "DINNER",
    SNACKS = "SNACKS",
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}
